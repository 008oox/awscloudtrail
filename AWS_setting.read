In views.py, functions call modules from the folder 'GetRecordFromAWS', where all Python files will import the 'Save' folder. This 'Save' folder helps to use access key and secure key to call AWS Boto3 session and client.

To keep these sections running properly, we must create a folder named 'Save'. The 'Save' folder must be in the same directory as the 'awscloudtrail' folder.
Reference to Tree structure below:
Tree of directory:
awscloudtrail
├───awscloudtrail
│   ├───settings.py
│   └─── ...        
├───cloudtrailapp
│   ├───GetRecordFromAWS
│   ├───migrations
│   ├───templates
│   ├───timeStamp
│   ├───ViewModels
│   ├───models.py
│   ├───views.py
│   └─── ...
├───images
├───AWS_settings.read
├───README.md
└───manager.py
Save
├───SettleAPI.py
├───cndev.txt
└───cnprod.txt


both cndev.txt and cnprod.txt contains 2 string lines:
<Your Access key to visit AWS>
<Your Secure key to visit AWS>


Code of SettleAPI.py for your reference, remember to modify 'region_name' with the right region you want, this python file will generate 'boto3.session' and 'boto3.client' based on 'cndev.txt' and 'cnprod.txt':
import os, boto3
from typing import Generator
class SettleAPI:
    def Getfile(file: str):  # type: ignore
        with open(file, "r") as f:
            return (line.strip() for line in f.readlines())

    def Access(Gen: Generator):  # type: ignore
        Access = None
        Secret = None
        if Gen:
            Access = next(Gen)
            Secret = next(Gen)
        return Access, Secret

    def getAccessSecret(filename: str):  # type: ignore
        current_directory = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(current_directory, filename + ".txt")
        GetPath = SettleAPI.Getfile(file_path)  # type: ignore
        Access, Secret = SettleAPI.Access(GetPath)  # type: ignore
        return Access, Secret

    def cnDev():
        return SettleAPI.getAccessSecret("cndev")  # type: ignore

    def cnProd():
        return SettleAPI.getAccessSecret("cnprod")  # type: ignore

    def AWSDomain():
        ENV = {"cndev": "cnDev", "cnprod": "cnProd"}
        return ENV

    def valid_env(env: str):  # type: ignore
        if env not in SettleAPI.AWSDomain():
            raise ValueError('Invalid AWS ENV, should be "cnprod" or "cndev"')
        else:
            GetEnv = SettleAPI.AWSDomain()[env]
            GetAccessKey = getattr(SettleAPI, GetEnv)
            Access, Secret = GetAccessKey()
            return Access, Secret

    def getSession(env: str):  # type: ignore
        Access, Secret = SettleAPI.valid_env(env)  # type: ignore
        session = boto3.Session(aws_access_key_id=Access, aws_secret_access_key=Secret, region_name="cn-north-1")
        return session

    def getClient(env: str, service: str):  # type: ignore
        Access, Secret = SettleAPI.valid_env(env)  # type: ignore
        client = boto3.client(service, aws_access_key_id=Access, aws_secret_access_key=Secret, region_name="cn-north-1")
        return client